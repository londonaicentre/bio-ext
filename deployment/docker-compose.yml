services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION}
    container_name: bioextelastic
    networks:
      - bioext_network
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    environment:  
      - discovery.type=single-node
      - ELASTIC_USERNAME=${ES_USERNAME}
      - ELASTIC_PASSWORD=${ES_PASSWORD}
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - xpack.license.self_generated.type=basic
      - xpack.ml.enabled=false
      - xpack.profiling.enabled=false
      - xpack.graph.enabled=false
      - ES_JAVA_OPTS=-Xms${ES_HEAP_INIT} -Xmx${ES_HEAP_MAX}
      - cluster.routing.allocation.disk.watermark.low=${ES_DISK_SPACE_LOW}
      - cluster.routing.allocation.disk.watermark.high=${ES_DISK_SPACE_HIGH}
      - cluster.routing.allocation.disk.watermark.flood_stage=${ES_DISK_SPACE_FLOOD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --output /dev/null --silent --head --fail -u ${ES_USERNAME}:${ES_PASSWORD} http://elasticsearch:9200",
        ]
      interval: 5s
      timeout: 5s
      retries: 10

  kibana_settings:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION}
    container_name: kibana_settings
    environment:
      - no_proxy=elasticsearch,bioextelastic,localhost,127.0.0.1,.bioext_network
      - NO_PROXY=elasticsearch,bioextelastic,localhost,127.0.0.1,.bioext_network
    networks:
      - bioext_network
    restart: 'no'
    command: >
      bash -c '
        echo "Setup the kibana_system password";
        start_time=$(date +%s);
        timeout=60;
        until curl -s -u "${ES_USERNAME}:${ES_PASSWORD}" -X POST http://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"'${KIBANA_PASSWORD}'\"}" -H "Content-Type: application/json" | grep -q "^{}"; do if [ $(($(date +%s) - $$start_time)) -ge $$timeout ]; then echo "Error: Elasticsearch timeout"; exit 1; fi; sleep 2; done;
      '

  kibana:
    depends_on:
      kibana_settings:
        condition: service_completed_successfully
    image: docker.elastic.co/kibana/kibana:${ES_VERSION}
    container_name: bioextkibana
    networks:
      - bioext_network
    volumes:
      - kibana_data:/usr/share/kibana/data
    ports:
      - "5601:5601"
    environment:
      - SERVER_NAME=kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_PUBLICBASEURL=http://localhost:9200
      - XPACK_ML_ENABLED=false
      - XPACK_APM_ENABLED=false
      - TELEMETRY_ENABLED=false
      - XPACK_REPORTING_ENABLED=false
      - XPACK_GRAPH_ENABLED=false
      - no_proxy=elasticsearch,bioextelastic,localhost,127.0.0.1,.bioext_network
      - NO_PROXY=elasticsearch,bioextelastic,localhost,127.0.0.1,.bioext_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://kibana:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 20

  doccano:
    image: doccano/doccano:${DOCCANO_VERSION}
    container_name: bioextdoccano
    networks:
      - bioext_network
    ports:
      - "8000:8000"
    volumes:
      - doccano_data:/data
    environment:
      - ADMIN_USERNAME=${DOCCANO_ADMIN_USERNAME}
      - ADMIN_PASSWORD=${DOCCANO_ADMIN_PASSWORD}
      - ADMIN_EMAIL=${DOCCANO_ADMIN_EMAIL}
      - DJANGO_DB_ENGINE=django.db.backends.sqlite3
      - DJANGO_DB_NAME=/data/doccano.sqlite3
    command: ["/doccano/tools/run.sh", "webserver"]
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G      
    restart: unless-stopped
  
  medcattrainer:
    image: cogstacksystems/medcat-trainer:v2.18.1
    container_name: bioextmedcattrainer
    networks:
      - bioext_network    
    volumes:
      - ./medcattrainer/configs:/home/configs
      - mct-api-media:/home/api/media
      - mct-api-static:/home/api/static
      - mct-api-db:/home/api/db
    env_file:
      - ./.env.example
    environment:
      - MCT_VERSION=v2.18.1
    # ports:
    #   - "${MCTRAINER_PORT:-8001}:8000"
    command: /home/scripts/run.sh
    depends_on:
      - medcattrainer-bg-process
      - medcattrainer_solr
      - medcattrainer_nginx
    restart: unless-stopped
  
  medcattrainer-bg-process:
    image: cogstacksystems/medcat-trainer:v2.18.1
    networks:
      - bioext_network 
    volumes:
      - ./medcattrainer/configs:/home/configs
      - mct-api-media:/home/api/media
      - mct-api-static:/home/api/static
      - mct-api-db:/home/api/db
    env_file:
      - ./.env.example
    command: /home/scripts/run-bg-process.sh
    restart: unless-stopped
  
  medcattrainer_nginx:
    container_name: bioextmedcattrainer_nginx
    image: nginx
    networks:
      - bioext_network 
    volumes:
      - mct-api-media:/home/api/media
      - mct-api-static:/home/api/static
      - ./medcattrainer/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./medcattrainer/nginx/sites-enabled/:/etc/nginx/sites-enabled
    env_file:
      - ./.env.example
    ports:
      - "${MCTRAINER_PORT:-8001}:8000"
    restart: unless-stopped

  medcattrainer_solr: 
    container_name: bioextmedcattrainer_solr
    image: solr:8
    networks:
      - bioext_network 
    restart: unless-stopped
    env_file:
      - ./.env.example
    expose:
      - "8983"
    # ports:
    #   - "${CONCEPT_SEARCH_SERVICE_PORT:-8983}:8983"
    volumes:
      - mct-solr-data:/var/solr
    command:
      - -cloud  # solr cloud launches

  minio:
    image: minio/minio:${MINIO_VERSION}
    container_name: bioextminio
    networks:
      - bioext_network
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: ["server", "/data", "--console-address", ":9001", "--address", ":9000"]
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 8G
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  minio_init:
    image: minio/mc
    container_name: bioextminio_init
    networks:
      - bioext_network
    depends_on:
      - minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set bioextminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      /usr/bin/mc mb bioextminio/mlflow-artifacts --ignore-existing &&
      /usr/bin/mc anonymous set public bioextminio/mlflow-artifacts"
    restart: 'no'

  mlflow:
    build:
      context: ./mlflow-boto-docker
      dockerfile: Dockerfile
    container_name: bioextmlflow
    networks:
      - bioext_network
    ports:
      - "5001:5001"
    volumes:
      - mlflow_data:/mlflow/data
    environment:
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
      - MLFLOW_S3_IGNORE_TLS=true
      - AWS_DEFAULT_REGION=minio
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - MLFLOW_LOGGING_LEVEL=DEBUG
      - MLFLOW_ENABLE_ARTIFACTS_PROGRESS_BAR=true
      # required to bypass Trust proxies to communicate with Minio
      - no_proxy=bioextminio,localhost,127.0.0.1,.bioext_network
      - NO_PROXY=bioextminio,localhost,127.0.0.1,.bioext_network
    command: >
      mlflow server --host 0.0.0.0 --port 5001
      --backend-store-uri sqlite:///mlflow/data/mlflow.db
      --artifacts-destination s3://mlflow-artifacts
      --serve-artifacts
      --gunicorn-opts "--timeout 3600 --workers 4 --threads 8 --worker-class gthread --worker-connections 1000"
    depends_on:
      - minio
      - minio_init
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 16G
    restart: unless-stopped

volumes:
  mlflow_data:
  minio_data:
  doccano_data:
  kibana_data:
  elasticsearch_data:
  mct-api-media:
  mct-api-static:
  mct-api-db:
  mct-solr-data:

networks:
  bioext_network:
    name: bioext_network